;; Builded on  2009-11-12 20:38:27 

;############### ontology ##################
; Sat Dec 12 19:11:58 CET 2009
; 
;+ (version "3.4.1")
;+ (build "Build 537")


(defclass %3ACLIPS_TOP_LEVEL_SLOT_CLASS "Fake class to save top-level slot information"
	(is-a USER)
	(role abstract)
	(multislot provinces
		(type INSTANCE)
;+		(allowed-classes Province)
		(create-accessor read-write))
	(single-slot available_to
		(type INSTANCE)
;+		(allowed-classes Date)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot title
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot rent
;+		(comment "in euros per month")
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot house_number
		(type STRING)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot cities
		(type INSTANCE)
;+		(allowed-classes City)
		(create-accessor read-write))
	(single-slot floor
		(type STRING)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot month
;+		(comment "number of month in year")
		(type INTEGER)
		(range 1 12)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot districts
		(type INSTANCE)
;+		(allowed-classes District)
		(create-accessor read-write))
	(multislot shop_type
		(type SYMBOL)
		(allowed-values Grocery Drugstore)
		(create-accessor read-write))
	(single-slot flat_type
		(type SYMBOL)
		(allowed-values attic normal ground)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot transport
		(type INSTANCE)
;+		(allowed-classes Transport)
		(create-accessor read-write))
	(single-slot noisy
;+		(comment "percentage of noise: 0 -quite\n100 - noisy (landing planes)")
		(type INTEGER)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot street
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot available_from
		(type INSTANCE)
;+		(allowed-classes Date)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot firstname
		(type STRING)
		(cardinality 1 2)
		(create-accessor read-write))
	(single-slot inhabitants
;+		(comment "number of inhabitants living in this area")
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot coordinates
;+		(comment "GPS coordinates for displaying on a map")
		(type INSTANCE)
;+		(allowed-classes Coordinates)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot description
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot postal_code
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot year
		(type INTEGER)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot surname
		(type STRING)
		(cardinality 1 2)
		(create-accessor read-write))
	(single-slot windows_num
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot latitude
;+		(comment "GPS coordinate")
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot house_type
		(type SYMBOL)
		(allowed-values Terraced Semidetached BlockOfFlats)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot rooms
		(type INSTANCE)
;+		(allowed-classes Room)
		(create-accessor read-write))
	(single-slot room_type
		(type SYMBOL)
		(allowed-values single double kitchen)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot age
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot day
;+		(comment "day number in month")
		(type INTEGER)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot district
		(type INSTANCE)
;+		(allowed-classes District)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot name_
		(type STRING)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot longitude
;+		(comment "GPS coordinate in degrees")
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot address
		(type INSTANCE)
;+		(allowed-classes Address)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot flats
		(type INSTANCE)
;+		(allowed-classes Flat)
		(create-accessor read-write))
	(single-slot space
;+		(comment "in square m  of house")
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot country
		(type INSTANCE)
;+		(allowed-classes Country)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot realty
;+		(comment "piece of immovable realty estate")
		(type INSTANCE)
;+		(allowed-classes PlaceToLive)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot city
		(type INSTANCE)
;+		(allowed-classes City)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Offer
	(is-a USER)
	(role concrete)
	(single-slot available_to
		(type INSTANCE)
;+		(allowed-classes Date)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot title
		(type STRING)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot rent
;+		(comment "in euros per month")
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot available_from
		(type INSTANCE)
;+		(allowed-classes Date)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot realty
;+		(comment "piece of immovable realty estate")
		(type INSTANCE)
;+		(allowed-classes PlaceToLive)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass Address
	(is-a USER)
	(role concrete)
	(single-slot district
		(type INSTANCE)
;+		(allowed-classes District)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot coordinates
;+		(comment "GPS coordinates for displaying on a map")
		(type INSTANCE)
;+		(allowed-classes Coordinates)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot street
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot city
		(type INSTANCE)
;+		(allowed-classes City)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Equipment
	(is-a USER)
	(role concrete))

(defclass Coordinates "GPS coordinates of an object"
	(is-a USER)
	(role concrete)
	(single-slot longitude
;+		(comment "GPS coordinate in degrees")
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot latitude
;+		(comment "GPS coordinate")
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass Date
	(is-a USER)
	(role concrete)
	(single-slot month
;+		(comment "number of month in year")
		(type INTEGER)
		(range 1 12)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot day
;+		(comment "day number in month")
		(type INTEGER)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot year
		(type INTEGER)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass PlaceToLive
	(is-a USER)
	(role abstract)
	(single-slot description
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot address
		(type INSTANCE)
;+		(allowed-classes Address)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass House
	(is-a PlaceToLive)
	(role concrete)
	(single-slot house_type
		(type SYMBOL)
		(allowed-values Terraced Semidetached BlockOfFlats)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot flats
		(type INSTANCE)
;+		(allowed-classes Flat)
		(create-accessor read-write)))

(defclass Flat
	(is-a PlaceToLive)
	(role concrete)
	(single-slot space
;+		(comment "in square m  of house")
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot rooms
		(type INSTANCE)
;+		(allowed-classes Room)
		(create-accessor read-write))
	(single-slot floor
		(type STRING)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot flat_type
		(type SYMBOL)
		(allowed-values attic normal ground)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass Room
	(is-a PlaceToLive)
	(role concrete)
	(single-slot rent
;+		(comment "in euros per month")
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot space
;+		(comment "in square m  of house")
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot windows_num
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot room_type
		(type SYMBOL)
		(allowed-values single double kitchen)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass Services
	(is-a USER)
	(role abstract)
	(single-slot title
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot noisy
;+		(comment "percentage of noise: 0 -quite\n100 - noisy (landing planes)")
		(type INTEGER)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot coordinates
;+		(comment "GPS coordinates for displaying on a map")
		(type INSTANCE)
;+		(allowed-classes Coordinates)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass FoodBeverage
	(is-a Services)
	(role concrete))

(defclass Restarurant
	(is-a FoodBeverage)
	(role concrete)
	(single-slot address
		(type INSTANCE)
;+		(allowed-classes Address)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Bar
	(is-a FoodBeverage)
	(role concrete))

(defclass Pub
	(is-a FoodBeverage)
	(role concrete))

(defclass Entertaitment
	(is-a Services)
	(role concrete))

(defclass Cinema
	(is-a Entertaitment)
	(role concrete))

(defclass Theatre
	(is-a Entertaitment)
	(role concrete))

(defclass Club
	(is-a Entertaitment)
	(role concrete))

(defclass Education
	(is-a Services)
	(role concrete))

(defclass School
	(is-a Education)
	(role concrete))

(defclass University
	(is-a Education)
	(role concrete))

(defclass Library
	(is-a Education)
	(role concrete))

(defclass HealthCare
	(is-a Services)
	(role concrete))

(defclass Hospital
	(is-a HealthCare)
	(role concrete))

(defclass Transport
	(is-a Services)
	(role concrete))

(defclass Station "public transport stop"
	(is-a Transport)
	(role abstract))

(defclass BusStop
	(is-a Station)
	(role concrete))

(defclass MetroStation
	(is-a Station)
	(role concrete))

(defclass TransferStation
	(is-a MetroStation)
	(role concrete))

(defclass TrainStation
	(is-a Station)
	(role concrete))

(defclass TramStop
	(is-a Station)
	(role concrete))

(defclass Shopping
	(is-a Services)
	(role concrete))

(defclass Shop
	(is-a Shopping)
	(role concrete)
	(multislot shop_type
		(type SYMBOL)
		(allowed-values Grocery Drugstore)
		(create-accessor read-write)))

(defclass Supermarket
	(is-a Shop)
	(role concrete))

(defclass Market
	(is-a Shopping)
	(role concrete))

(defclass GeographicalPart
	(is-a USER)
	(role concrete)
	(single-slot title
		(type STRING)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Country
	(is-a GeographicalPart)
	(role concrete)
	(single-slot inhabitants
;+		(comment "number of inhabitants living in this area")
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot provinces
		(type INSTANCE)
;+		(allowed-classes Province)
		(create-accessor read-write)))

(defclass City
	(is-a GeographicalPart)
	(role concrete)
	(single-slot postal_code
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot inhabitants
;+		(comment "number of inhabitants living in this area")
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot districts
		(type INSTANCE)
;+		(allowed-classes District)
		(create-accessor read-write))
	(single-slot country
		(type INSTANCE)
;+		(allowed-classes Country)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass District
	(is-a GeographicalPart)
	(role concrete)
	(single-slot postal_code
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass Province
	(is-a GeographicalPart)
	(role concrete)
	(single-slot postal_code
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot inhabitants
;+		(comment "number of inhabitants living in this area")
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot cities
		(type INSTANCE)
;+		(allowed-classes City)
		(create-accessor read-write)))

(defclass Person
	(is-a USER)
	(role concrete)
	(multislot firstname
		(type STRING)
		(cardinality 1 2)
		(create-accessor read-write))
	(multislot surname
		(type STRING)
		(cardinality 1 2)
		(create-accessor read-write))
	(single-slot age
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write)))


;############### instances ##################
(definstances inst 
; Sat Dec 12 19:11:58 CET 2009
; 
;+ (version "3.4.1")
;+ (build "Build 537")

([house_Class1] of  Person

	(age 44)
	(firstname "Foo")
	(surname "Bar"))

([house_Class10] of  Country

	(inhabitants 50000000)
	(provinces [house_Class11])
	(title "Spain"))

([house_Class10005] of  Flat

	(address [house_Class9])
	(description "loosy flat")
	(flat_type normal)
	(floor "2")
	(rooms [house_Class10008])
	(space 70))

([house_Class10006] of  Address

	(city [house_Class13])
	(coordinates [house_Class10007])
	(district [house_Class15])
	(street "aaa"))

([house_Class10007] of  Coordinates

	(latitude 3.0)
	(longitude 2.0))

([house_Class10008] of  Room

	(address [house_Class10009])
	(description "small room")
	(rent 300.0)
	(room_type single)
	(space 13)
	(windows_num 0))

([house_Class10009] of  Address

	(city [house_Class13])
	(coordinates [house_Class10007])
	(district [house_Class15])
	(street "carrer de nick"))

([house_Class11] of  Province

	(cities [house_Class13])
	(title "Barcelona"))

([house_Class13] of  City

	(country [house_Class10])
	(districts
		[house_Class14]
		[house_Class15])
	(postal_code "80000")
	(title "Barcelona"))

([house_Class14] of  District

	(title "Barceloneta"))

([house_Class15] of  District

	(title "Ciutat Vella"))

([house_Class3] of  Pub

	(coordinates [house_Class4]))

([house_Class4] of  Coordinates

	(latitude -1.0)
	(longitude 3.0))

([house_Class5] of  Offer

	(available_from [house_Class6])
	(realty [house_Class10005])
	(rent 500.0)
	(title "nice flat"))

([house_Class6] of  Date

	(day 12)
	(month 12)
	(year 2009))

([house_Class7] of  Coordinates

	(latitude 0.0)
	(longitude 0.0))

([house_Class9] of  Address

	(city [house_Class13])
	(street "Passaige de Gracia"))
);;############### program ##################
;;; ---------------------------------------------------------------------------------------------------------------------
;;; ---------------------------------------------- ENGINE ---------------------------------------------------------------
;;; ---------------------------------------------------------------------------------------------------------------------

;;**************
;;* DEFCLASSES *
;;**************

(defclass person
	(is-a USER)
	(slot age)
	(slot occupation)
)

;;****************
;;* DEFTEMPLATE *
;;****************

(deftemplate recommendation "Expert system would recommend you this offers:"
	(slot name)
  ;(multislot Offers)
	(slot final?)
)
;;************
;;* MESSAGES *
;;************

(defmessage-handler Offer print()
	(printout t "----------------------------------" crlf)
	(format t "Offer: %s%n" ?self:title)
	(printout t "----------------------------------" crlf crlf)
)


;;****************
;;* DEFFUNCTIONS *
;;****************

(deffunction question (?question $?allowed-values)
	(progn$ (?var ?allowed-values) (lowcase ?var))
	(format t "%s? (%s) " ?question (implode$ ?allowed-values))
	(bind ?answer (read))
	(if (lexemep ?answer) 
	    then (bind ?answer (lowcase ?answer)))
	(while (not (member ?answer ?allowed-values)) do
	    (format t "%s? " ?question)O
	    (bind ?answer (read))
	    (if (lexemep ?answer) 
		then (bind ?answer (lowcase ?answer))))
	?answer
)
(deffunction ask-question (?question $?allowed-values)
    (format t "%s? (%s) " ?question (implode$ ?allowed-values))
)

(deffunction yes-or-no (?question)
   (bind ?response (ask-question ?question yes no y n))
   (if (or (eq ?response yes) (eq ?response y))
       then TRUE 
       else FALSE))

(deffunction tree-state (?question)
   (bind ?response (ask-question ?question yes no dontcare y n x))
   (if (or (eq ?response yes) (eq ?response y))
       then TRUE) 
   (if (or (eq ?response no) (eq ?response n))    
       then FALSE)
   NULL)
   
 
 ;(defmodule MAIN (export ?ALL))


;;;*********
;;;* RULES *
;;;*********

(defrule determine-room-type ""
   =>
   (bind ?answer (question "Are you going to live in a room:" alone partner other) )
   (switch ?answer
      (case alone
	  then
    (bind ?i 1)
    (bind ?inst (find-all-instances ((?it Offer)) (= ?it:rent 500)) )
      (while (<= ?i (length$ ?inst))
        do
        (bind ?curr (nth$ ?i ?inst)) ; get item from array
        (printout t (send ?curr print)) ; call message print on ?curr
        (bind ?i (+ ?i 1)) ; i+=1
        )
        )
   )
 )

 (defrule determine-environment-type ""
   =>
   (bind ?answer (question "In what kind of environment do you want to live:" quiet centric young residential outskirts) )
   (switch ?answer
      (case quiet
        then
      )
      (case centric
	    then
	      (printout t "centric" crlf)
      )
   )
 )

;;;****************************
;;;* STARTUP AND REPAIR RULES *
;;;****************************

(defrule system-banner ""
  (declare (salience 10))
  =>
  (printout t crlf crlf)
  (printout t "Housing Expert System")
  (printout t crlf crlf))

(defrule print-offer ""
  (declare (salience 10))
  (repair ?item)
  =>
  (printout t crlf crlf)
  (printout t "Suggested offer:")
  (printout t crlf crlf)
  (format t " %s%n%n%n" ?item))
